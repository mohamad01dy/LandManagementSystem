openapi: 3.0.0
info:
  title: Land Management API
  version: 1.0.0
  description: Basic API description

security:
  - bearerAuth: [ ]

paths:
  /test:
    get:
      tags:
        - test
      summary: say hello
      description: say hello
      operationId: sayHello
      responses:
        '200':
          description: Successful hello response
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
  /auth/register:
    post:
      tags:
        - SignUp
      summary: Create a new User
      description: User details sent from frontend are used to create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Invalid Input
  /auth/login:
    post:
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /user:
    put:
      tags:
        - User
      summary: update an existing User
      description: User details sent from frontend are used to update an existing User
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User successfully updated
        '404':
          description: User to be updated not found
  /user/{id}:
    get:
      tags:
        - User
      summary: Get an existing User
      description: Get an existing User by its id
      operationId: getUserById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the brand to retrieve
      responses:
        '200':
          description: User successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /buy-request:
    post:
      tags:
        - BuyRequest
      summary: create a buy request
      description: the buyer creates a buy request to send it to the owner
      operationId: createBuyRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyRequest'
      responses:
        '200':
          description: the buy-request is successfully created/sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyRequest'
        '500':
          description: error
  /buy-requests/sent:
    get:
      tags:
        - BuyRequest
      summary: get all of buy-requests
      description: return an array of buy-requests send from this user
      operationId: getSentBuyRequests
      responses:
        '200':
          description: List of sent buy-requests successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuyRequest'
        '401':
          description: Unauthorized â€“ token is missing or invalid
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Land:
      type: object
      description: Land created on the frontend level containing all details
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
        surface:
          type: number
          format: float
        usageDescr:
          type: string
        price:
          type: integer
        contact:
          type: string
        ownershipHistoryIds:
          type: array
          items:
            type: integer
        ownerId:
          type: integer
    User:
      type: object
      description: User and owner of properties
      properties:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
        address:
          type: string
        email:
          type: string
        password:
          type: string
        landIds:
          type: array
          items:
            type:
              integer
        ownershipHistoryIds:
          type: array
          items:
            type: integer
        sentBuyRequestIds:
          type: array
          items:
            type: integer
        receivedBuyRequestIds:
          type: array
          items:
            type: integer
    OwnershipHistory:
      type: object
      description: owners sequence of a specific land
      properties:
        historyId:
          type: integer
        orderNumber:
          type: integer
        owner:
          $ref: '#/components/schemas/User'
        land:
          $ref: '#/components/schemas/Land'
    BuyRequest:
      type: object
      description: sent and received land buy requests
      properties:
        requestId:
          type: integer
        status:
          type: string
        buyerId:
          type: integer
        sellerId:
          type: integer
        landId:
          type: integer

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string